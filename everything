class Post{
    private:
        string body_;
        string post_author_;
        int num_likes_;
        string date_;
    public:
        Post();
        Post(string body, string postAuth, int numLikes, string date);
        string getPostBody(); //Returns the body_ of the post
        void setPostBody(string post_body); //Sets new body_ for the post
        string getPostAuthor(); //Returns the post_author_ of the post
        void setPostAuthor(string author); //Sets the new post_author_ for the post
        int getPostLikes(); //Returns num_likes_ that the post has received
        void setPostLikes(int likes); //Sets num_likes_ data member to likes if likes is a positive integer or 0.
        string getPostDate(); //Returns the date_ of the post
        void setPostDate(string post_date); //Sets new date_ for the post
};

Post::Post(){
    //Sets body_, post_author_, date_ to empty string and num_likes_ to 0
    body_ = "";
    post_author_ = "";
    date_ = "";
    num_likes_ = 0;
}

Post::Post(string body, string postAuth, int numLikes, string date){
    //Takes a string for body_, string for post_author_, int for num_likes_, and string for date_ (in this order) for initializing the data members of a Post object
    body_ = body;
    post_author_ = postAuth;
    date_ = date;
    num_likes_ = numLikes;
}

string Post::getPostBody(){
    //Returns the body_ of the post
    return body_;
}
void Post::setPostBody(string post_body){
    //Sets the new post_author_ for the post
    body_ = post_body;
       
}

string Post::getPostAuthor(){
   //Returns the post_author_ of the post
    return post_author_;
}
void Post::setPostAuthor(string author){
    //Sets the new post_author_ for the post
    post_author_ = author;
}
int Post::getPostLikes(){
    //Returns num_likes_ that the post has received
    return num_likes_;
}

void Post::setPostLikes(int likes){
    //Sets num_likes_ data member to likes if likes is a positive integer or 0.
    if(likes >= 0){
        num_likes_ = likes;
    }
}
string Post::getPostDate(){
    //Returns the date_ of the post
    return date_;
}
void Post::setPostDate(string post_date){
    //Sets new date_ for the post
    date_ = post_date;
}
int split(string input_string, char seperator, string arr[], int arr_size){
    // varriable declaration
    int currentPieces = 0;
    int seperatorCount = 0;
    int index = 0;
    // storing my string length in a variable
    const int stringLength = input_string.length();
    // if the input string has no elements return 0
    if (input_string == "") return 0;
    // for loop for rows
    for (int i = 0; i < stringLength; i++) {
        int length_to_do = i - index;
        if (currentPieces < arr_size) {
            if (input_string[i] == seperator) {
                arr[currentPieces] = input_string.substr(index, length_to_do);
                currentPieces++;
                seperatorCount++;
                index = i + 1;
            }
            // if 
            if (i + 1 == stringLength) {
                arr[currentPieces] = input_string.substr(index, length_to_do + 1);
                currentPieces++;
            }
        }
        else return -1;
    }
    if (seperatorCount == 0) {
        arr[0] = input_string;
        return 1;
    }
    return currentPieces;
}
int readPosts(string fileName, Post posts[],int numPostsS, int postsArrSize)
{

    if(numPostsS == postsArrSize)
    {
        return -2;
    }
    string line;
    ifstream input;
    input.open(fileName);
    if(input.is_open())
    {
        return -1;  
    }
    while(numPostsS < postsArrSize && getline(input,line))
    {
        if(line != "")
        {
            string temp[4];
            if(split(line, '|', temp, 4)==4)
            {
                posts[numPostsS] = Post(temp[0], temp[1], stoi(temp[2]), temp[3]);
                numPostsS++;
            }
        }
    }
    return numPostsS;
}

class User{
    private:
        static const int size_ = 50;
        string username_;
        int likes_[size_];
        int num_Posts_;        
    public:
        User();
        User(string username, int likes[], int num_posts);
        string getUsername();
        void setUsername(string username);
        int getLikesAt(int post_id);
        bool setLikesAt(int post_id, int num_likes);
        void setNumPosts(int posts);
        int getNumPosts();
        int getSize();
};
User::User()
{
    username_ = "";
    for (int i = 0; i<size_; i++){
        likes_[i] = -1;
    }
    num_Posts_ = 0;
}
//Paramaterized constructor
User::User(string username, int likes[], int num_posts){
    username_ = username;
    for (int i = 0; i<size_; i++){
        likes_[i] = -1;
    }
    for (int i = 0; i<num_posts; i++){
        likes_[i] = likes[i];
    }
    num_Posts_ = num_posts;
}


string User::getUsername(){
    return username_;
}
int User::getLikesAt(int post_id){
    if(post_id >= size_ || post_id < 0){
        return -2;
    }
    else{
        return likes_[post_id];
    }
}
int User::getNumPosts(){
    return num_Posts_;
}
int User::getSize(){
    return size_;
}

void User::setUsername(string username){
    username_ = username;
}
bool User::setLikesAt(int post_id, int num_likes){
    if(post_id >= num_Posts_ || post_id < 0 || (num_likes < -1) || (num_likes > 10)){
        return false;
    }
    else{
        likes_[post_id] = num_likes;
        return true;
    }
}
void User::setNumPosts(int posts){
    if(posts > 0 && posts < size_){
        num_Posts_ = posts;
    }
}
class Buffchat 
{
    private:
        static const int posts_size_ = 50;
        static const int users_size_ = 50;    
        Post posts[posts_size_];
        User users[users_size_];
        int num_posts_;
        int num_users_;
        
    public:
    Buffchat();
    int getPostSize();
    int getUserSize();
    int getNumPosts();
    int getNumUsers();
    int readPosts(string file_name);
    void printPostsByYear(string year);
    int readLikes(string file_name);
    int getLikes(string post_author, string username);
    void findTagUser(string username_tag);
    bool addPost(string post_body, string post_author, string date);
    void printPopularPosts(int min_likes, string year);
    User findLeastActiveUser();
    int countUniqueLikes(string post_author);
};
// default constructor 
Buffchat::Buffchat()
{
    num_posts_ = 0;
    num_users_ = 0;

}
// returns post size
int Buffchat::getPostSize()
{
    return posts_size_;
}
//Returns users_size_ as an integer
int Buffchat::getUserSize()
{
    return users_size_;
}

//Returns num_posts_ as an integer
int Buffchat::getNumPosts()
{
    return num_posts_;
}

//Returns num_users_ as an integer
int Buffchat::getNumUsers()
{
    return num_users_;
}

//Takes a string (the name of the file to be read) and populates the posts_ array. 
//Returns the total number of posts in posts_ array as an integer
int Buffchat::readPosts(string filename){
    string line;
    ifstream fin;
    string lineSplit[4];
    fin.open(filename);
    
    if (num_posts_ >= users_size_){
        return -2;
    }
    else if(fin.fail()){
        return -1;
    }
    else{
        while (!fin.eof()){
            getline(fin, line);
            if(split(line, '|', lineSplit, 4) != 4){
                continue;
            }
            if(num_posts_ >= users_size_){
                return num_posts_;
            }
            Post posts[num_posts_] = Post(lineSplit[0],lineSplit[1],stoi(lineSplit[2]),lineSplit[3]);
            num_posts_++;
        }
        return num_posts_;
    }   
}

//Takes a string (the year) and prints the posts posted in the given year
void Buffchat::printPostsByYear(string year)
{
   if (num_posts_ < 1)
   { 
        cout << "No posts are stored" << endl;
    }
    else{
        int index = 0;
        int count = 0;
        int tempArr[num_posts_];
        for (int i = 0; i < num_posts_; i++){
            if (posts[i].getPostDate().substr(6,9) == year){
                tempArr[index] = i;
                index++;
                count++;                
            }
        }
        if(count < 20)
        {
            cout << "There are fewer than " << count << "posts for year " << year << ". Top " << count << " posts for <year>" << endl;
        }
        
        if (num_posts_ > 1){ 
            cout << "Here is a list of posts for year " << year << endl;
            for (int i = 0; i < count; i++)
            {
                int x = tempArr[i];
                cout << posts[x].getPostBody() << endl;
            }
        }
        else if (num_posts_ <= 0){
            cout << "No posts stored for year " << year << endl;
        }
    }
}
//Takes a string (the name of the file to be read) and populates the users_ array. 
//Returns the total number of users in users_ array as an integer
int Buffchat::readLikes(string file_name)	
{

    if(num_users_ == users_size_)
    {
        return -2;
    }
    string line;
    ifstream input;
    input.open(file_name);   
    if (!input.is_open())
    { 
        return -1;
    }
    int index = num_users_;     
    while (getline(input, line) && num_users_ < users_size_)
    {  
        if (line != "")
        {       
            string temp[num_users_+1];  
            int x[50];                  
            int index = split(line, '|', temp, num_users_ + 1);   
            for(int i = 1; i < index; i++)
            {    
                int b = stoi(temp[i]); 
                x[i-1] = b;
            }
            User tempUser(temp[0], x, index-1);
            users[index] = tempUser;    
            index++;   
            num_users_++;     
        }
    }
    return num_users_;
}


 
